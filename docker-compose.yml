
name: demofortsb
# Test Build ok, all containers run successfully at 2025-08-30 14:22:56
services:
  # PostgreSQL database service for storing customer data
  db:
    image: postgres:16
    container_name: demofortsb-db
    environment:
      POSTGRES_DB: demofortsb
      POSTGRES_USER: tsb
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tsb}
    ports:
      - "5432:5432"  # expose for local tools (remove in production)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tsb -d demofortsb"]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - db-data:/var/lib/postgresql/data
    networks: [demo]
    restart: unless-stopped

  # Redis service for JWT blacklisting
  redis:
    image: redis:7.0-alpine
    container_name: demofortsb-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes  # Add password and AOF persistence
    ports:
      - "6379:6379"                                # Expose for local tools (remove in production)
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis123}", "ping" ]  # Include password in health check
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [demo]
    restart: unless-stopped                        # Restart unless explicitly stopped

  app:
    # Spring Boot application service
    build:
      context: .
      dockerfile: Dockerfile
    image: demofortsb:latest
    container_name: demofortsb-app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Spring Datasource Configuration
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/demofortsb
      SPRING_DATASOURCE_USERNAME: tsb
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-tsb}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update

      # Redis Configuration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}

      # JWT Security Configuration
      JWT_SECRET: ${JWT_SECRET:-DemoForTsBSecretKeyMustBeAtLeast256BitsLongForHS256Algorithm2024}
      JWT_TTL_MINUTES: ${JWT_TTL_MINUTES:-60}
      JWT_ADMIN_NATIONAL_ID: ${JWT_ADMIN_NATIONAL_ID:-123456789}

      # Actuator Configuration for Prometheus
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
      MANAGEMENT_SERVER_PORT: "8080"

      # Optional: select a profile
      # SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [demo]
    restart: unless-stopped

  # Prometheus Service for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: demofortsb-prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=2d
    volumes:
      - ./ops/prometheus:/etc/prometheus:ro   # <— mount folder, not single file - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom-data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      app:
        condition: service_healthy
    networks: [demo]
    restart: unless-stopped

  # Grafana Service for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: demofortsb-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_SECURITY_ADMIN_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./ops/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prometheus:
        condition: service_started
    networks: [demo]
    restart: unless-stopped

  seq:
    image: datalust/seq:latest
    environment:
      ACCEPT_EULA: "Y"
      SEQ_FIRSTRUN_NOAUTHENTICATION: "true"  # Disable authentication
    ports:
      - "5341:80"         # Seq UI → http://localhost:5341
    volumes:
      - ./seq-data:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail http://localhost/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks: [demo]
    restart: unless-stopped

  # Seq Input GELF Service for structured logging
  seq-input-gelf:
    image: datalust/seq-input-gelf:latest
    environment:
      SEQ_ADDRESS: "http://seq:5341"
      # SEQ_API_KEY: "<optional key from Seq UI>"
    ports:
      - "12201:12201/udp" # GELF UDP (or expose TCP)
    depends_on:
      seq:
        condition: service_healthy
    networks: [demo]
    restart: unless-stopped

networks:
  demo:
    driver: bridge

volumes:
  db-data:
  redis-data:
  prom-data:
  grafana-data:
  seq-data:
